/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Youtube = {
  _type: "youtube";
  url?: string;
};

export type Code = {
  _type: "code";
  language?:
    | "text"
    | "javascript"
    | "typescript"
    | "python"
    | "java"
    | "c"
    | "cpp"
    | "csharp"
    | "php"
    | "ruby"
    | "go"
    | "rust"
    | "swift"
    | "kotlin"
    | "html"
    | "css"
    | "scss"
    | "sql"
    | "bash"
    | "powershell"
    | "json"
    | "xml"
    | "yaml"
    | "markdown"
    | "dockerfile"
    | "r"
    | "matlab"
    | "perl"
    | "lua"
    | "assembly";
  code?: string;
  filename?: string;
};

export type CustomImage = {
  _type: "customImage";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  caption?: string;
};

export type Note = {
  _id: string;
  _type: "note";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  syllabus?: string;
  slug?: Slug;
  university?: "medicaps" | "ips";
  degree?: "btech-cse" | "btech-it";
  year?: "1st-year" | "2nd-year" | "3rd-year" | "4th-year";
  semester?:
    | "1st-semester"
    | "2nd-semester"
    | "3rd-semester"
    | "4th-semester"
    | "5th-semester"
    | "6th-semester"
    | "7th-semester"
    | "8th-semester";
  subject?: string;
  type?:
    | "NOTES"
    | "MST"
    | "PYQ"
    | "ONE-SHOT"
    | "VIDEO-MATERIAL"
    | "HANDWRITTEN-NOTES";
  isPremium?: boolean;
  tier?: "TIER_1" | "TIER_2" | "TIER_3";
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?:
          | "normal"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | ({
        _key: string;
      } & Latex)
    | ({
        _key: string;
      } & CustomImage)
    | ({
        _key: string;
      } & Table)
    | ({
        _key: string;
      } & Code)
    | ({
        _key: string;
      } & Youtube)
  >;
};

export type Latex = {
  _type: "latex";
  body?: string;
};

export type Table = {
  _type: "table";
  rows?: Array<
    {
      _key: string;
    } & TableRow
  >;
};

export type TableRow = {
  _type: "tableRow";
  cells?: Array<string>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Youtube
  | Code
  | CustomImage
  | Note
  | Latex
  | Table
  | TableRow
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/app/sitemap.ts
// Variable: ALL_NOTES_SITEMAP_QUERY
// Query: *[_type == "note" && defined(slug.current)] {    "slug": slug.current,    _updatedAt  }
export type ALL_NOTES_SITEMAP_QUERYResult = Array<{
  slug: string | null;
  _updatedAt: string;
}>;

// Source: ./src/sanity/lib/next-content-queries.ts
// Variable: NEXT_UNITS_QUERY
// Query: *[_type == "note" &&     university == $university &&    degree == $degree &&    year == $year &&    semester == $semester &&    subject == $subject &&    type == "NOTES" &&    slug.current != $currentSlug &&    defined(slug.current)  ] | order(title asc) [0...5] {    _id,    title,    slug,    syllabus,    isPremium,    tier  }
export type NEXT_UNITS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  syllabus: string | null;
  isPremium: boolean | null;
  tier: "TIER_1" | "TIER_2" | "TIER_3" | null;
}>;
// Variable: SUBJECT_OTHER_CONTENT_QUERY
// Query: *[_type == "note" &&     university == $university &&    degree == $degree &&    year == $year &&    semester == $semester &&    subject == $subject &&    (type == "MST" || type == "PYQ" || type == "ONE-SHOT" || type == "VIDEO-MATERIAL" || type == "HANDWRITTEN-NOTES") &&    slug.current != $currentSlug &&    defined(slug.current)  ] | order(title asc) [0...3] {    _id,    title,    slug,    syllabus,    isPremium,    tier  }
export type SUBJECT_OTHER_CONTENT_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  syllabus: string | null;
  isPremium: boolean | null;
  tier: "TIER_1" | "TIER_2" | "TIER_3" | null;
}>;

// Source: ./src/sanity/lib/queries.ts
// Variable: NOTES_QUERY
// Query: *[_type == "note" && defined(slug.current) &&     (!defined($search) ||       title match $search + "*" ||      subject match $search + "*" ||      (length($search) >= 3 && pt::text(syllabus) match $search + "*")    ) &&    (!defined($university) || university == $university) &&    (!defined($degree) || degree == $degree) &&    (!defined($year) || year == $year) &&    (!defined($semester) || semester == $semester) &&    (!defined($subject) || lower(subject) match lower($subject)) &&    (!defined($premium) ||       ($premium == "free" && (!defined(isPremium) || isPremium == false)) ||      ($premium == "premium" && isPremium == true)    ) &&    (!defined($type) ||       ($type == "all") ||      ($type == "notes" && type == "NOTES") ||      ($type == "mst" && type == "MST") ||      ($type == "pyq" && type == "PYQ") ||      ($type == "one-shot" && type == "ONE-SHOT") ||      ($type == "video-material" && type == "VIDEO-MATERIAL") ||      ($type == "handwritten-notes" && type == "HANDWRITTEN-NOTES")    ) &&    (!defined($lastTitle) || title > $lastTitle || (title == $lastTitle && _id > $lastId))  ] | order(title asc, _id asc) [0...6] {  _id,  _createdAt,  title,  syllabus,  slug,  university,  degree,  year,  semester,  subject,  type,  isPremium,  tier,  "searchScore": select(    defined($search) && title match $search + "*" => 3,    defined($search) && subject match $search + "*" => 2,    defined($search) && pt::text(syllabus) match $search + "*" => 1,    true => 0  )}
export type NOTES_QUERYResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  syllabus: string | null;
  slug: Slug | null;
  university: "ips" | "medicaps" | null;
  degree: "btech-cse" | "btech-it" | null;
  year: "1st-year" | "2nd-year" | "3rd-year" | "4th-year" | null;
  semester:
    | "1st-semester"
    | "2nd-semester"
    | "3rd-semester"
    | "4th-semester"
    | "5th-semester"
    | "6th-semester"
    | "7th-semester"
    | "8th-semester"
    | null;
  subject: string | null;
  type:
    | "HANDWRITTEN-NOTES"
    | "MST"
    | "NOTES"
    | "ONE-SHOT"
    | "PYQ"
    | "VIDEO-MATERIAL"
    | null;
  isPremium: boolean | null;
  tier: "TIER_1" | "TIER_2" | "TIER_3" | null;
  searchScore: 0 | 1 | 2 | 3;
}>;
// Variable: NOTES_COUNT_QUERY
// Query: count(*[_type == "note" && defined(slug.current) &&     (!defined($search) ||       title match $search + "*" ||      subject match $search + "*" ||      (length($search) >= 3 && pt::text(syllabus) match $search + "*")    ) &&    (!defined($university) || university == $university) &&    (!defined($degree) || degree == $degree) &&    (!defined($year) || year == $year) &&    (!defined($semester) || semester == $semester) &&    (!defined($subject) || lower(subject) match lower($subject)) &&    (!defined($premium) ||       ($premium == "free" && (!defined(isPremium) || isPremium == false)) ||      ($premium == "premium" && isPremium == true)    ) &&    (!defined($type) ||       ($type == "all") ||      ($type == "notes" && type == "NOTES") ||      ($type == "mst" && type == "MST") ||      ($type == "pyq" && type == "PYQ") ||      ($type == "one-shot" && type == "ONE-SHOT") ||      ($type == "video-material" && type == "VIDEO-MATERIAL") ||      ($type == "handwritten-notes" && type == "HANDWRITTEN-NOTES")    )  ])
export type NOTES_COUNT_QUERYResult = number;
// Variable: SUBJECTS_QUERY
// Query: *[_type == "note" && defined(subject) &&    (!defined($university) || university == $university) &&    (!defined($degree) || degree == $degree) &&    (!defined($year) || year == $year) &&    (!defined($semester) || semester == $semester)  ] {    "subject": subject  } | order(subject asc)
export type SUBJECTS_QUERYResult = Array<{
  subject: string | null;
}>;
// Variable: NOTE_BY_SLUG_QUERY
// Query: *[_type == "note" && slug.current == $slug][0]{ _id,  title,  syllabus,  university,  degree,  year,  semester,  subject,  type,  tier,  "headings": content[style in ["h2", "h3", "h4", "h5", "h6"]],  content,  slug,  isPremium}
export type NOTE_BY_SLUG_QUERYResult = {
  _id: string;
  title: string | null;
  syllabus: string | null;
  university: "ips" | "medicaps" | null;
  degree: "btech-cse" | "btech-it" | null;
  year: "1st-year" | "2nd-year" | "3rd-year" | "4th-year" | null;
  semester:
    | "1st-semester"
    | "2nd-semester"
    | "3rd-semester"
    | "4th-semester"
    | "5th-semester"
    | "6th-semester"
    | "7th-semester"
    | "8th-semester"
    | null;
  subject: string | null;
  type:
    | "HANDWRITTEN-NOTES"
    | "MST"
    | "NOTES"
    | "ONE-SHOT"
    | "PYQ"
    | "VIDEO-MATERIAL"
    | null;
  tier: "TIER_1" | "TIER_2" | "TIER_3" | null;
  headings: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  content: Array<
    | ({
        _key: string;
      } & Code)
    | ({
        _key: string;
      } & CustomImage)
    | ({
        _key: string;
      } & Latex)
    | ({
        _key: string;
      } & Table)
    | ({
        _key: string;
      } & Youtube)
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?:
          | "blockquote"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
  > | null;
  slug: Slug | null;
  isPremium: boolean | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '\n  *[_type == "note" && defined(slug.current)] {\n    "slug": slug.current,\n    _updatedAt\n  }\n': ALL_NOTES_SITEMAP_QUERYResult;
    '\n  *[_type == "note" && \n    university == $university &&\n    degree == $degree &&\n    year == $year &&\n    semester == $semester &&\n    subject == $subject &&\n    type == "NOTES" &&\n    slug.current != $currentSlug &&\n    defined(slug.current)\n  ] | order(title asc) [0...5] {\n    _id,\n    title,\n    slug,\n    syllabus,\n    isPremium,\n    tier\n  }\n': NEXT_UNITS_QUERYResult;
    '\n  *[_type == "note" && \n    university == $university &&\n    degree == $degree &&\n    year == $year &&\n    semester == $semester &&\n    subject == $subject &&\n    (type == "MST" || type == "PYQ" || type == "ONE-SHOT" || type == "VIDEO-MATERIAL" || type == "HANDWRITTEN-NOTES") &&\n    slug.current != $currentSlug &&\n    defined(slug.current)\n  ] | order(title asc) [0...3] {\n    _id,\n    title,\n    slug,\n    syllabus,\n    isPremium,\n    tier\n  }\n': SUBJECT_OTHER_CONTENT_QUERYResult;
    '*[_type == "note" && defined(slug.current) && \n    (!defined($search) || \n      title match $search + "*" ||\n      subject match $search + "*" ||\n      (length($search) >= 3 && pt::text(syllabus) match $search + "*")\n    ) &&\n    (!defined($university) || university == $university) &&\n    (!defined($degree) || degree == $degree) &&\n    (!defined($year) || year == $year) &&\n    (!defined($semester) || semester == $semester) &&\n    (!defined($subject) || lower(subject) match lower($subject)) &&\n    (!defined($premium) || \n      ($premium == "free" && (!defined(isPremium) || isPremium == false)) ||\n      ($premium == "premium" && isPremium == true)\n    ) &&\n    (!defined($type) || \n      ($type == "all") ||\n      ($type == "notes" && type == "NOTES") ||\n      ($type == "mst" && type == "MST") ||\n      ($type == "pyq" && type == "PYQ") ||\n      ($type == "one-shot" && type == "ONE-SHOT") ||\n      ($type == "video-material" && type == "VIDEO-MATERIAL") ||\n      ($type == "handwritten-notes" && type == "HANDWRITTEN-NOTES")\n    ) &&\n    (!defined($lastTitle) || title > $lastTitle || (title == $lastTitle && _id > $lastId))\n  ] | order(title asc, _id asc) [0...6] {\n  _id,\n  _createdAt,\n  title,\n  syllabus,\n  slug,\n  university,\n  degree,\n  year,\n  semester,\n  subject,\n  type,\n  isPremium,\n  tier,\n  "searchScore": select(\n    defined($search) && title match $search + "*" => 3,\n    defined($search) && subject match $search + "*" => 2,\n    defined($search) && pt::text(syllabus) match $search + "*" => 1,\n    true => 0\n  )\n}': NOTES_QUERYResult;
    'count(*[_type == "note" && defined(slug.current) && \n    (!defined($search) || \n      title match $search + "*" ||\n      subject match $search + "*" ||\n      (length($search) >= 3 && pt::text(syllabus) match $search + "*")\n    ) &&\n    (!defined($university) || university == $university) &&\n    (!defined($degree) || degree == $degree) &&\n    (!defined($year) || year == $year) &&\n    (!defined($semester) || semester == $semester) &&\n    (!defined($subject) || lower(subject) match lower($subject)) &&\n    (!defined($premium) || \n      ($premium == "free" && (!defined(isPremium) || isPremium == false)) ||\n      ($premium == "premium" && isPremium == true)\n    ) &&\n    (!defined($type) || \n      ($type == "all") ||\n      ($type == "notes" && type == "NOTES") ||\n      ($type == "mst" && type == "MST") ||\n      ($type == "pyq" && type == "PYQ") ||\n      ($type == "one-shot" && type == "ONE-SHOT") ||\n      ($type == "video-material" && type == "VIDEO-MATERIAL") ||\n      ($type == "handwritten-notes" && type == "HANDWRITTEN-NOTES")\n    )\n  ])': NOTES_COUNT_QUERYResult;
    '\n  *[_type == "note" && defined(subject) &&\n    (!defined($university) || university == $university) &&\n    (!defined($degree) || degree == $degree) &&\n    (!defined($year) || year == $year) &&\n    (!defined($semester) || semester == $semester)\n  ] {\n    "subject": subject\n  } | order(subject asc)\n': SUBJECTS_QUERYResult;
    '\n*[_type == "note" && slug.current == $slug][0]{\n _id,\n  title,\n  syllabus,\n  university,\n  degree,\n  year,\n  semester,\n  subject,\n  type,\n  tier,\n  "headings": content[style in ["h2", "h3", "h4", "h5", "h6"]],\n  content,\n  slug,\n  isPremium\n}  \n': NOTE_BY_SLUG_QUERYResult;
  }
}
